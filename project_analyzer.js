#!/usr/bin/env node
/**
 * Powerful HRMS Repo Analyzer
 * Just paste this whole script into Gemini CLI and run.
 * It will scan your ENTIRE project folder and print a detailed
 * Markdown report with structure, imports, and issues.
 */

const fs = require("fs");
const path = require("path");

// Extensions to scan
const EXTENSIONS = [".js", ".jsx", ".ts", ".tsx"];

let folderCount = 0;
let fileCount = 0;
let errors = [];

/**
 * Walk directories recursively
 */
function walk(dir, filelist = []) {
  folderCount++;
  fs.readdirSync(dir).forEach((file) => {
    const filepath = path.join(dir, file);
    if (fs.statSync(filepath).isDirectory()) {
      filelist = walk(filepath, filelist);
    } else {
      fileCount++;
      filelist.push(filepath);
    }
  });
  return filelist;
}

/**
 * Extract imports/require()
 */
function getImports(content) {
  const importRegex = /import\s+.*?from\s+['"](.*?)['"]/g;
  const requireRegex = /require\(['"](.*?)['"]\)/g;
  let matches = [];
  let match;
  while ((match = importRegex.exec(content))) matches.push(match[1]);
  while ((match = requireRegex.exec(content))) matches.push(match[1]);
  return matches;
}

/**
 * Analyze file imports
 */
function analyzeFile(filepath) {
  try {
    const content = fs.readFileSync(filepath, "utf-8");
    const imports = getImports(content);

    // Check relative imports exist
    imports.forEach((imp) => {
      if (imp.startsWith(".")) {
        const resolved = path.resolve(path.dirname(filepath), imp);
        const possibleFiles = EXTENSIONS.map((ext) => resolved + ext);
        const exists =
          fs.existsSync(resolved) ||
          possibleFiles.some((f) => fs.existsSync(f)) ||
          fs.existsSync(resolved + "/index.js");
        if (!exists) {
          errors.push(`❌ Missing import in ${filepath}: ${imp}`);
        }
      }
    });

    return { filepath, imports };
  } catch (err) {
    errors.push(`⚠️ Error reading ${filepath}: ${err.message}`);
    return null;
  }
}

/**
 * Build folder tree (ASCII style)
 */
function buildTree(dir, prefix = "") {
  const files = fs.readdirSync(dir);
  let tree = "";
  files.forEach((file, i) => {
    const filepath = path.join(dir, file);
    const isLast = i === files.length - 1;
    const connector = isLast ? "└── " : "├── ";
    tree += prefix + connector + file + "\n";
    if (fs.statSync(filepath).isDirectory()) {
      tree += buildTree(filepath, prefix + (isLast ? "    " : "│   "));
    }
  });
  return tree;
}

/**
 * Main
 */
function main() {
  const root = process.cwd(); // current folder (your HRMS root)
  const files = walk(root);

  const analysis = files
    .filter((f) => EXTENSIONS.includes(path.extname(f)))
    .map((f) => analyzeFile(f))
    .filter(Boolean);

  // Start Markdown report
  let report = [];
  report.push(`# 📊 HRMS Project Analysis Report\n`);
  report.push(`- Total folders: **${folderCount}**`);
  report.push(`- Total files: **${fileCount}**`);
  report.push(`- JS/TS files analyzed: **${analysis.length}**\n`);

  // Folder tree
  report.push(`## 📂 Folder Structure`);
  report.push("```\n" + buildTree(root) + "```");

  // Imports overview
  report.push(`\n## 📦 File Import Overview`);
  analysis.forEach((a) => {
    report.push(`- **${a.filepath}**`);
    if (a.imports.length === 0) {
      report.push(`   - (no imports found)`);
    } else {
      a.imports.forEach((imp) => report.push(`   - imports → ${imp}`));
    }
  });

  // Issues
  if (errors.length > 0) {
    report.push(`\n## ❌ Issues Detected`);
    errors.forEach((e) => report.push("- " + e));
  } else {
    report.push(`\n✅ No missing imports detected`);
  }

  // Done
  report.push(`\n---\nGenerated by HRMS Analyzer Script 🚀`);
  console.log(report.join("\n"));
}

main();
